/*
 * ark/v1/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
use super::Error;
use crate::apis::ResponseContent;
use crate::models;
use reqwest;
use serde::Deserialize;
use serde::Serialize;

/// struct for typed errors of method [`ark_service_delete_nostr_recipient`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceDeleteNostrRecipientError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_boarding_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetBoardingAddressError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_event_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetEventStreamError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetInfoError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_round`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetRoundError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_round_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetRoundByIdError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_get_transactions_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceGetTransactionsStreamError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_list_vtxos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceListVtxosError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_ping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServicePingError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_register_inputs_for_next_round`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceRegisterInputsForNextRoundError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_register_outputs_for_next_round`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceRegisterOutputsForNextRoundError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_set_nostr_recipient`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceSetNostrRecipientError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_submit_redeem_tx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceSubmitRedeemTxError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_submit_signed_forfeit_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceSubmitSignedForfeitTxsError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_submit_tree_nonces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceSubmitTreeNoncesError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ark_service_submit_tree_signatures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArkServiceSubmitTreeSignaturesError {
    DefaultResponse(models::RpcStatus),
    UnknownValue(serde_json::Value),
}

pub async fn ark_service_delete_nostr_recipient(
    configuration: &configuration::Configuration,
    body: models::V1DeleteNostrRecipientRequest,
) -> Result<serde_json::Value, Error<ArkServiceDeleteNostrRecipientError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/vtxo/nostr/delete", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceDeleteNostrRecipientError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_boarding_address(
    configuration: &configuration::Configuration,
    body: models::V1GetBoardingAddressRequest,
) -> Result<models::V1GetBoardingAddressResponse, Error<ArkServiceGetBoardingAddressError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/boarding", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetBoardingAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_event_stream(
    configuration: &configuration::Configuration,
) -> Result<models::StreamResultOfV1GetEventStreamResponse, Error<ArkServiceGetEventStreamError>> {
    let uri_str = format!("{}/v1/events", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetEventStreamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_info(
    configuration: &configuration::Configuration,
) -> Result<models::V1GetInfoResponse, Error<ArkServiceGetInfoError>> {
    let uri_str = format!("{}/v1/info", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetInfoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_round(
    configuration: &configuration::Configuration,
    txid: &str,
) -> Result<models::V1GetRoundResponse, Error<ArkServiceGetRoundError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_txid = txid;

    let uri_str = format!(
        "{}/v1/round/{txid}",
        configuration.base_path,
        txid = crate::apis::urlencode(p_txid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetRoundError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_round_by_id(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<models::V1GetRoundByIdResponse, Error<ArkServiceGetRoundByIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!(
        "{}/v1/round/id/{id}",
        configuration.base_path,
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetRoundByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_get_transactions_stream(
    configuration: &configuration::Configuration,
) -> Result<
    models::StreamResultOfV1GetTransactionsStreamResponse,
    Error<ArkServiceGetTransactionsStreamError>,
> {
    let uri_str = format!("{}/v1/transactions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceGetTransactionsStreamError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_list_vtxos(
    configuration: &configuration::Configuration,
    address: &str,
) -> Result<models::V1ListVtxosResponse, Error<ArkServiceListVtxosError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address = address;

    let uri_str = format!(
        "{}/v1/vtxos/{address}",
        configuration.base_path,
        address = crate::apis::urlencode(p_address)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceListVtxosError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_ping(
    configuration: &configuration::Configuration,
    request_id: &str,
) -> Result<serde_json::Value, Error<ArkServicePingError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_request_id = request_id;

    let uri_str = format!(
        "{}/v1/round/ping/{requestId}",
        configuration.base_path,
        requestId = crate::apis::urlencode(p_request_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServicePingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_register_inputs_for_next_round(
    configuration: &configuration::Configuration,
    body: models::V1RegisterInputsForNextRoundRequest,
) -> Result<
    models::V1RegisterInputsForNextRoundResponse,
    Error<ArkServiceRegisterInputsForNextRoundError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/round/registerInputs", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceRegisterInputsForNextRoundError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_register_outputs_for_next_round(
    configuration: &configuration::Configuration,
    body: models::V1RegisterOutputsForNextRoundRequest,
) -> Result<serde_json::Value, Error<ArkServiceRegisterOutputsForNextRoundError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/round/registerOutputs", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceRegisterOutputsForNextRoundError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_set_nostr_recipient(
    configuration: &configuration::Configuration,
    body: models::V1SetNostrRecipientRequest,
) -> Result<serde_json::Value, Error<ArkServiceSetNostrRecipientError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/vtxo/nostr", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceSetNostrRecipientError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_submit_redeem_tx(
    configuration: &configuration::Configuration,
    body: models::V1SubmitRedeemTxRequest,
) -> Result<models::V1SubmitRedeemTxResponse, Error<ArkServiceSubmitRedeemTxError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/redeem-tx", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceSubmitRedeemTxError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_submit_signed_forfeit_txs(
    configuration: &configuration::Configuration,
    body: models::V1SubmitSignedForfeitTxsRequest,
) -> Result<serde_json::Value, Error<ArkServiceSubmitSignedForfeitTxsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/round/submitForfeitTxs", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceSubmitSignedForfeitTxsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_submit_tree_nonces(
    configuration: &configuration::Configuration,
    body: models::V1SubmitTreeNoncesRequest,
) -> Result<serde_json::Value, Error<ArkServiceSubmitTreeNoncesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/round/tree/submitNonces", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceSubmitTreeNoncesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn ark_service_submit_tree_signatures(
    configuration: &configuration::Configuration,
    body: models::V1SubmitTreeSignaturesRequest,
) -> Result<serde_json::Value, Error<ArkServiceSubmitTreeSignaturesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;

    let uri_str = format!("{}/v1/round/tree/submitSignatures", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ArkServiceSubmitTreeSignaturesError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
